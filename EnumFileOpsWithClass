Sub EnumFileOperations()

Dim strSoftwarefileName As String
Dim strDBCFileName As String
Dim strstrSoftwareFileText As String
Dim strDBCFileText As String
Dim intFileNo As Integer
Dim intOpeningParentheses As Integer
Dim intClosingParentheses As Integer
Dim strEnclosedEnumValue As String
Dim strFirstTerm As String
Dim strSecondTerm As String
Dim lgStartPosition As Long 'Stores the starting position of firstTerm
Dim lgStopPosition As Long 'Stores the starting position of secondTerm based on first term's location
Dim lgNextPosition As Long
Dim collcollSoftwareSignal As New Collection 'collection of multiple signal's collection from software file
Dim collcollDBCSignal As New Collection 'collection of multiple signal's collection from DBC file
Dim strEnumInDBC As String


strSoftwarefileName = "H:\My Documents\type_def.h"
strDBCFileName = "H:\My Documents\ccan.dbc"
intFileNo = FreeFile 'Get first free file number
 
Open strSoftwarefileName For Input As #intFileNo
strSoftwareFileText = Input$(LOF(intFileNo), intFileNo)
Close #intFileNo

Open strDBCFileName For Input As #intFileNo
strDBCFileText = Input$(LOF(intFileNo), intFileNo)
Close #intFileNo

'sending enum string from Software file
Dim StringWithSignalName As String
lgNextPosition = 1
strFirstTerm = "typedef enum"
strSecondTerm = "}"
Do Until lgNextPosition = 0
        lgStartPosition = InStr(lgNextPosition, strSoftwareFileText, strFirstTerm, vbTextCompare)
        lgStopPosition = InStr(lgStartPosition, strSoftwareFileText, strSecondTerm, vbTextCompare)
        StringWithBrackets = Mid$(strSoftwareFileText, lgStartPosition + Len(strFirstTerm), lgStopPosition - lgStartPosition - Len(strSecondTerm))
        intOpeningParentheses = InStr(StringWithBrackets, "{")
        intClosingParentheses = InStr(StringWithBrackets, "}")
        StringWithSignalName = Mid(StringWithBrackets, 1, (intOpeningParentheses - 1))
        strEnclosedEnumValue = Mid(StringWithBrackets, intOpeningParentheses + 1, intClosingParentheses - intOpeningParentheses - 1)
        collcollSoftwareSignal.Add Item:=funSoftwareSignalCollection(strEnclosedEnumValue)
        lgNextPosition = InStr(lgStopPosition, strSoftwareFileText, strFirstTerm, vbTextCompare)
Loop

'sending enum string from DBC file

lgNextPosition = 1
strFirstTerm = "VAL_ 8"
strSecondTerm = ";"
Do Until lgNextPosition = 0
        lgStartPosition = InStr(lgNextPosition, strDBCFileText, strFirstTerm, vbTextCompare)
        lgStopPosition = InStr(lgStartPosition, strDBCFileText, strSecondTerm, vbTextCompare)
        strEnumInDBC = Mid$(strDBCFileText, lgStartPosition + Len(strFirstTerm), lgStopPosition - lgStartPosition - Len(strSecondTerm))
        collcollDBCSignal.Add Item:=funDBCSignalCollection(strEnumInDBC)
        strFirstTerm = "VAL_"
        lgNextPosition = InStr(lgStopPosition, strDBCFileText, strFirstTerm, vbTextCompare)
Loop

End Sub

'string of signal Enum from .dbc file is returned as collection datatype
Public Function funDBCSignalCollection(SignalString As String) As Object
Dim collDBCSignal As New Collection
Dim SubStrings() As String

SubStrings = Split(SignalString)
lower = LBound(SubStrings)
upper = UBound(SubStrings)

Dim i As Variant
For i = (lower + 3) To (upper - 1)
    Dim InstClsSignal As New clsSignal
    InstClsSignal.SignalValue = SubStrings(i)
    InstClsSignal.SignalName = SubStrings(i + 1)
    collDBCSignal.Add Item:=InstClsSignal       'adding signal's each value and name into collection
    i = i + 1
    Set InstClsSignal = Nothing
Next
Set funDBCSignalCollection = collDBCSignal
End Function

'string of signal Enum from software's _.h file is returned as collection datatype
Public Function funSoftwareSignalCollection(SignalString As String) As Object
Dim collSoftwareSignal As New Collection
Dim InstClsSignal As New clsSignal
Dim SubStrings() As String
SubStrings = Split(SignalString, ",")
Dim SubSubStrings() As String
InstClsSignal.BitSizeSignalEnum = funEnumOperations(SignalString) 'calculates bit size of given enum string
lower = LBound(SubStrings)
upper = UBound(SubStrings)

Dim modifiedSignalValue As Integer
modifiedSignalValue = 0

Dim i As Variant
For i = lower To upper
    If InStr(SubStrings(i), "=") > 0 Then
        SubSubStrings = Split(SubStrings(i), "=")
        InstClsSignal.SignalValue = NumericOnly(SubSubStrings(1))
        InstClsSignal.SignalName = Trim(SubSubStrings(0))
    Else
        InstClsSignal.SignalValue = modifiedSignalValue
        InstClsSignal.SignalName = Trim(SubStrings(i))
    End If
    collSoftwareSignal.Add Item:=InstClsSignal         'adding signal's each value and name into collection
    If InstClsSignal.SignalValue > i Then
       modifiedSignalValue = CStr(InstClsSignal.SignalValue)
    End If
    modifiedSignalValue = modifiedSignalValue + 1
    Set InstClsSignal = Nothing
Next
Set funSoftwareSignalCollection = collSoftwareSignal

End Function



'Gets enum string ,return size and number of bits of given enum
Public Function funEnumOperations(EnumString As String) As Integer
Dim substrs() As String
Dim num As Variant
Dim Val As Long
Dim index As Integer
Dim upper As Integer
Dim lower As Integer
Dim Prev_Val As Integer

substrs = Split(EnumString, ",")
index = 0
lower = LBound(substrs)
upper = UBound(substrs)
Prev_Val = 0


For Each num In substrs
    Val = NumericOnly(CStr(num))
    If (Val <> 0) Then
        If Prev_Val < Val Then
            Prev_Val = Val
            lower = index
        End If
    End If
    index = index + 1
Next num


If Prev_Val = 0 Then
    Prev_Val = upper + 1
    'MsgBox ("Size of enum=" & Prev_Val)
Else
    Prev_Val = Prev_Val + upper - lower + 1
    'MsgBox ("Size of enum=" & Prev_Val)
End If
funEnumOperations = GetBitSize(Prev_Val)
'MsgBox ("number of bits required for Size of enum=" & GetBitSize(Prev_Val))
End Function

'returns integer portion of provided string using RegEx
Public Function NumericOnly(s2 As String) As Long
Dim replace_hyphen As String
replace_hyphen = " "
Static re As VBScript_RegExp_55.RegExp
If re Is Nothing Then Set re = New RegExp
re.IgnoreCase = True
re.Global = True
re.Pattern = "[^\d]"

If IsNumeric(re.Replace(s2, replace_hyphen)) Then
    NumericOnly = re.Replace(s2, replace_hyphen)
Else
    NumericOnly = 0
End If
End Function

'returns number of bits required to store for given enum size
Public Function GetBitSize(enum_size As Integer) As Integer
Dim bit_size As Integer
bit_size = 0
If enum_size >= 2 Then
    
    enum_size = enum_size - 1
    enum_size = enum_size Or (enum_size / 2)
    enum_size = enum_size Or (enum_size / 4)
    enum_size = enum_size Or (enum_size / 8)
    enum_size = enum_size Or (enum_size / 16)
    enum_size = enum_size + 1

    While (enum_size <> 1)
        bit_size = bit_size + 1
        enum_size = enum_size / 2
    Wend
    
Else
    bit_size = 1
End If
GetBitSize = bit_size
End Function

'Public Function GetSubStrings(SignalString As String) As String()

'End Function
